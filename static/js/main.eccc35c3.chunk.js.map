{"version":3,"sources":["Components/ContactList/index.js","App.js","serviceWorker.js","index.js"],"names":["Index","props","state","Arr1","A","B","C","Arr2","search","bind","ob","this","setState","e","filter_a","filter","item","toUpperCase","includes","target","value","filter_b","filter_c","console","log","A_letters","map","a_letter","className","href","B_letters","b_letter","C_letters","c_letter","placeholder","onInput","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eccc35c3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n     Arr1:{   \n      A: [\"Ace\", \"Acqua\", \"Azazil\"],\n      B: [\"Baz\", \"Bash\", \"Binga\"],\n      C: [\"Cabba\", \"Columbia\", \"Caf\"]},\n      Arr2:{\n        A:[],B:[],C:[]\n      }\n    };\n    this.search = this.search.bind(this);\n  }\n\ncomponentWillMount(){\n    let ob = this.state.Arr1\n    this.setState({Arr2:ob})\n}\n\n  search(e) {\n    let filter_a = this.state.Arr1.A.filter(item=>item.toUpperCase().includes(e.target.value.toUpperCase()))\n    let filter_b = this.state.Arr1.B.filter(item=>item.toUpperCase().includes(e.target.value.toUpperCase()))\n    let filter_c = this.state.Arr1.C.filter(item=>item.toUpperCase().includes(e.target.value.toUpperCase()))\n    console.log(e.target.value, \"A\", filter_a)\n    //console.log(\"A\",filter_a,\"B\",filter_b,\"C\",filter_c)\n    let ob = {A:filter_a,B:filter_b,C:filter_c}\n    this.setState({Arr2:ob})\n  }\n  render() {\n    const A_letters = this.state.Arr2.A.map((a_letter) => (\n      <li className=\"list-group-item\">\n        <a href=\"#\">{a_letter}</a>\n      </li>\n    ));\n    const B_letters = this.state.Arr2.B.map((b_letter) => (\n      <li className=\"list-group-item\">\n        <a href=\"#\">{b_letter}</a>\n      </li>\n    ));\n    const C_letters = this.state.Arr2.C.map((c_letter) => (\n      <li className=\"list-group-item\">\n        <a href=\"#\">{c_letter}</a>\n      </li>\n    ));\n\n    return (\n      <div className=\"\">\n        <input\n          className=\"form-control mt-2 mb-2\"\n          placeholder=\"Search ..\"\n          onInput={this.search}\n        />\n        <ul className=\"list-group\">\n          <li className=\"list-group-item btn-warning active text-white\">A</li>\n          {A_letters}\n          <li className=\"list-group-item btn-warning active text-white\">B</li>\n          {B_letters}\n          <li className=\"list-group-item btn-warning active text-white\">C</li>\n          {C_letters}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React ,{Component}from 'react'\nimport './App.css'\nimport Contacts from './Components/ContactList'\nclass App extends Component {\n  render(){\n    return(\n      <div className='container'>\n        <Contacts/>\n      </div>\n    )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}